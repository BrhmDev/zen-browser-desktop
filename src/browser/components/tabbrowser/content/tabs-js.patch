diff --git a/browser/components/tabbrowser/content/tabs.js b/browser/components/tabbrowser/content/tabs.js
index 137f1a3854f10aca0d0e3233a82c1c18fbdc2823..9e53ebeaa43746cf3b95ade361ce25bf8948ec05 100644
--- a/browser/components/tabbrowser/content/tabs.js
+++ b/browser/components/tabbrowser/content/tabs.js
@@ -500,6 +500,14 @@
     }
 
     startTabDrag(event, tab, { fromTabList = false } = {}) {
+      if (gBrowser.selectedTabs.some(tab => tab.splitView)) {
+        const groupIds = [];
+        gBrowser.selectedTabs.forEach((splitTab) => {
+          if (!splitTab.splitView || groupIds.includes(splitTab.splitId)) return;
+          groupIds.push(splitTab.splitId);
+        });
+        gBrowser.selectedTabs = [...new Set([...gBrowser.selectedTabs, ...groupIds.flatMap(id => gZenViewSplitter.getGroup(id).tabs)])];
+      }
       let selectedTabs = gBrowser.selectedTabs;
       let otherSelectedTabs = selectedTabs.filter(
         selectedTab => selectedTab != tab
@@ -1430,10 +1438,12 @@
 
     _handleTabSelect(aInstant) {
       let selectedTab = this.selectedItem;
-      if (this.hasAttribute("overflow")) {
-        this.arrowScrollbox.ensureElementIsVisible(selectedTab, aInstant);
-      }
+      this.arrowScrollbox.ensureElementIsVisible(selectedTab, aInstant);
 
+      if (!aInstant && Services.prefs.getBoolPref('zen.view.compact')
+          && Services.prefs.getBoolPref('zen.view.compact.toolbar-flash-popup')) {
+        gZenCompactModeManager.flashSidebar();
+      }
       selectedTab._notselectedsinceload = false;
     }
 
@@ -1492,7 +1502,7 @@
         let tabsToReset = [];
         for (let i = numPinned; i < tabs.length; i++) {
           let tab = tabs[i];
-          tab.style.setProperty("max-width", aTabWidth, "important");
+          //tab.style.setProperty("max-width", aTabWidth, "important");
           if (!isEndTab) {
             // keep tabs the same width
             tab.style.transition = "none";
@@ -1672,7 +1682,7 @@
       }
 
       let pinned = draggedTab.pinned;
-      let numPinned = gBrowser._numPinnedTabs;
+      let numPinned = gBrowser._numVisiblePinTabs;
       let tabs = this._getVisibleTabs().slice(
         pinned ? 0 : numPinned,
         pinned ? numPinned : undefined
